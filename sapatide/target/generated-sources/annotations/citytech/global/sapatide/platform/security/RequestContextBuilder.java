// Auto generated by io.soabase.recordbuilder.core.RecordBuilder: https://github.com/Randgalt/record-builder
package citytech.global.sapatide.platform.security;

import java.util.AbstractMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.Consumer;
import java.util.stream.Stream;
import javax.annotation.processing.Generated;

@Generated("io.soabase.recordbuilder.core.RecordBuilder")
public class RequestContextBuilder {
    private String subject;

    private String userType;

    private int userID;

    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    private RequestContextBuilder() {
    }

    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    private RequestContextBuilder(String subject, String userType, int userID) {
        this.subject = subject;
        this.userType = userType;
        this.userID = userID;
    }

    /**
     * Static constructor/builder. Can be used instead of new RequestContext(...)
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public static RequestContext RequestContext(String subject, String userType, int userID) {
        return new RequestContext(subject, userType, userID);
    }

    /**
     * Return a new builder with all fields set to default Java values
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public static RequestContextBuilder builder() {
        return new RequestContextBuilder();
    }

    /**
     * Return a new builder with all fields set to the values taken from the given record instance
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public static RequestContextBuilder builder(RequestContext from) {
        return new RequestContextBuilder(from.subject(), from.userType(), from.userID());
    }

    /**
     * Return a "with"er for an existing record instance
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public static RequestContextBuilder.With from(RequestContext from) {
        return new _FromWith(from);
    }

    /**
     * Return a stream of the record components as map entries keyed with the component name and the value as the component value
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public static Stream<Map.Entry<String, Object>> stream(RequestContext record) {
        return Stream.of(new AbstractMap.SimpleImmutableEntry<>("subject", record.subject()),
                 new AbstractMap.SimpleImmutableEntry<>("userType", record.userType()),
                 new AbstractMap.SimpleImmutableEntry<>("userID", record.userID()));
    }

    /**
     * Return a new record instance with all fields set to the current values in this builder
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public RequestContext build() {
        return new RequestContext(subject, userType, userID);
    }

    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    @Override
    public String toString() {
        return "RequestContextBuilder[subject=" + subject + ", userType=" + userType + ", userID=" + userID + "]";
    }

    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    @Override
    public int hashCode() {
        return Objects.hash(subject, userType, userID);
    }

    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    @Override
    public boolean equals(Object o) {
        return (this == o) || ((o instanceof RequestContextBuilder r)
                && Objects.equals(subject, r.subject)
                && Objects.equals(userType, r.userType)
                && (userID == r.userID));
    }

    /**
     * Set a new value for the {@code subject} record component in the builder
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public RequestContextBuilder subject(String subject) {
        this.subject = subject;
        return this;
    }

    /**
     * Return the current value for the {@code subject} record component in the builder
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public String subject() {
        return subject;
    }

    /**
     * Set a new value for the {@code userType} record component in the builder
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public RequestContextBuilder userType(String userType) {
        this.userType = userType;
        return this;
    }

    /**
     * Return the current value for the {@code userType} record component in the builder
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public String userType() {
        return userType;
    }

    /**
     * Set a new value for the {@code userID} record component in the builder
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public RequestContextBuilder userID(int userID) {
        this.userID = userID;
        return this;
    }

    /**
     * Return the current value for the {@code userID} record component in the builder
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public int userID() {
        return userID;
    }

    /**
     * Add withers to {@code RequestContext}
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public interface With {
        /**
         * Return the current value for the {@code subject} record component in the builder
         */
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        String subject();

        /**
         * Return the current value for the {@code userType} record component in the builder
         */
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        String userType();

        /**
         * Return the current value for the {@code userID} record component in the builder
         */
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        int userID();

        /**
         * Return a new record builder using the current values
         */
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        default RequestContextBuilder with() {
            return new RequestContextBuilder(subject(), userType(), userID());
        }

        /**
         * Return a new record built from the builder passed to the given consumer
         */
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        default RequestContext with(Consumer<RequestContextBuilder> consumer) {
            RequestContextBuilder builder = with();
            consumer.accept(builder);
            return builder.build();
        }

        /**
         * Return a new instance of {@code RequestContext} with a new value for {@code subject}
         */
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        default RequestContext withSubject(String subject) {
            return new RequestContext(subject, userType(), userID());
        }

        /**
         * Return a new instance of {@code RequestContext} with a new value for {@code userType}
         */
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        default RequestContext withUserType(String userType) {
            return new RequestContext(subject(), userType, userID());
        }

        /**
         * Return a new instance of {@code RequestContext} with a new value for {@code userID}
         */
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        default RequestContext withUserID(int userID) {
            return new RequestContext(subject(), userType(), userID);
        }
    }

    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    private static final class _FromWith implements RequestContextBuilder.With {
        private final RequestContext from;

        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        private _FromWith(RequestContext from) {
            this.from = from;
        }

        @Override
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        public String subject() {
            return from.subject();
        }

        @Override
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        public String userType() {
            return from.userType();
        }

        @Override
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        public int userID() {
            return from.userID();
        }
    }
}
