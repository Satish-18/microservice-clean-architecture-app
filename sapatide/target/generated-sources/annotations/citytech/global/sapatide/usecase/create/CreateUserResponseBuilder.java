// Auto generated by io.soabase.recordbuilder.core.RecordBuilder: https://github.com/Randgalt/record-builder
package citytech.global.sapatide.usecase.create;

import java.util.AbstractMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.Consumer;
import java.util.stream.Stream;
import javax.annotation.processing.Generated;

@Generated("io.soabase.recordbuilder.core.RecordBuilder")
public class CreateUserResponseBuilder {
    private int id;

    private String message;

    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    private CreateUserResponseBuilder() {
    }

    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    private CreateUserResponseBuilder(int id, String message) {
        this.id = id;
        this.message = message;
    }

    /**
     * Static constructor/builder. Can be used instead of new CreateUserResponse(...)
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public static CreateUserResponse CreateUserResponse(int id, String message) {
        return new CreateUserResponse(id, message);
    }

    /**
     * Return a new builder with all fields set to default Java values
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public static CreateUserResponseBuilder builder() {
        return new CreateUserResponseBuilder();
    }

    /**
     * Return a new builder with all fields set to the values taken from the given record instance
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public static CreateUserResponseBuilder builder(CreateUserResponse from) {
        return new CreateUserResponseBuilder(from.id(), from.message());
    }

    /**
     * Return a "with"er for an existing record instance
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public static CreateUserResponseBuilder.With from(CreateUserResponse from) {
        return new _FromWith(from);
    }

    /**
     * Return a stream of the record components as map entries keyed with the component name and the value as the component value
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public static Stream<Map.Entry<String, Object>> stream(CreateUserResponse record) {
        return Stream.of(new AbstractMap.SimpleImmutableEntry<>("id", record.id()),
                 new AbstractMap.SimpleImmutableEntry<>("message", record.message()));
    }

    /**
     * Return a new record instance with all fields set to the current values in this builder
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public CreateUserResponse build() {
        return new CreateUserResponse(id, message);
    }

    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    @Override
    public String toString() {
        return "CreateUserResponseBuilder[id=" + id + ", message=" + message + "]";
    }

    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    @Override
    public int hashCode() {
        return Objects.hash(id, message);
    }

    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    @Override
    public boolean equals(Object o) {
        return (this == o) || ((o instanceof CreateUserResponseBuilder r)
                && (id == r.id)
                && Objects.equals(message, r.message));
    }

    /**
     * Set a new value for the {@code id} record component in the builder
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public CreateUserResponseBuilder id(int id) {
        this.id = id;
        return this;
    }

    /**
     * Return the current value for the {@code id} record component in the builder
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public int id() {
        return id;
    }

    /**
     * Set a new value for the {@code message} record component in the builder
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public CreateUserResponseBuilder message(String message) {
        this.message = message;
        return this;
    }

    /**
     * Return the current value for the {@code message} record component in the builder
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public String message() {
        return message;
    }

    /**
     * Add withers to {@code CreateUserResponse}
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public interface With {
        /**
         * Return the current value for the {@code id} record component in the builder
         */
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        int id();

        /**
         * Return the current value for the {@code message} record component in the builder
         */
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        String message();

        /**
         * Return a new record builder using the current values
         */
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        default CreateUserResponseBuilder with() {
            return new CreateUserResponseBuilder(id(), message());
        }

        /**
         * Return a new record built from the builder passed to the given consumer
         */
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        default CreateUserResponse with(Consumer<CreateUserResponseBuilder> consumer) {
            CreateUserResponseBuilder builder = with();
            consumer.accept(builder);
            return builder.build();
        }

        /**
         * Return a new instance of {@code CreateUserResponse} with a new value for {@code id}
         */
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        default CreateUserResponse withId(int id) {
            return new CreateUserResponse(id, message());
        }

        /**
         * Return a new instance of {@code CreateUserResponse} with a new value for {@code message}
         */
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        default CreateUserResponse withMessage(String message) {
            return new CreateUserResponse(id(), message);
        }
    }

    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    private static final class _FromWith implements CreateUserResponseBuilder.With {
        private final CreateUserResponse from;

        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        private _FromWith(CreateUserResponse from) {
            this.from = from;
        }

        @Override
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        public int id() {
            return from.id();
        }

        @Override
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        public String message() {
            return from.message();
        }
    }
}
