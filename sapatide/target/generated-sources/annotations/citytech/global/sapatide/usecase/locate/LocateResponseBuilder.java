// Auto generated by io.soabase.recordbuilder.core.RecordBuilder: https://github.com/Randgalt/record-builder
package citytech.global.sapatide.usecase.locate;

import java.util.AbstractMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.Consumer;
import java.util.stream.Stream;
import javax.annotation.processing.Generated;

@Generated("io.soabase.recordbuilder.core.RecordBuilder")
public class LocateResponseBuilder {
    private String country;

    private String state;

    private String county;

    private String category;

    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    private LocateResponseBuilder() {
    }

    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    private LocateResponseBuilder(String country, String state, String county, String category) {
        this.country = country;
        this.state = state;
        this.county = county;
        this.category = category;
    }

    /**
     * Static constructor/builder. Can be used instead of new LocateResponse(...)
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public static LocateResponse LocateResponse(String country, String state, String county,
            String category) {
        return new LocateResponse(country, state, county, category);
    }

    /**
     * Return a new builder with all fields set to default Java values
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public static LocateResponseBuilder builder() {
        return new LocateResponseBuilder();
    }

    /**
     * Return a new builder with all fields set to the values taken from the given record instance
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public static LocateResponseBuilder builder(LocateResponse from) {
        return new LocateResponseBuilder(from.country(), from.state(), from.county(), from.category());
    }

    /**
     * Return a "with"er for an existing record instance
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public static LocateResponseBuilder.With from(LocateResponse from) {
        return new _FromWith(from);
    }

    /**
     * Return a stream of the record components as map entries keyed with the component name and the value as the component value
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public static Stream<Map.Entry<String, Object>> stream(LocateResponse record) {
        return Stream.of(new AbstractMap.SimpleImmutableEntry<>("country", record.country()),
                 new AbstractMap.SimpleImmutableEntry<>("state", record.state()),
                 new AbstractMap.SimpleImmutableEntry<>("county", record.county()),
                 new AbstractMap.SimpleImmutableEntry<>("category", record.category()));
    }

    /**
     * Return a new record instance with all fields set to the current values in this builder
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public LocateResponse build() {
        return new LocateResponse(country, state, county, category);
    }

    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    @Override
    public String toString() {
        return "LocateResponseBuilder[country=" + country + ", state=" + state + ", county=" + county + ", category=" + category + "]";
    }

    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    @Override
    public int hashCode() {
        return Objects.hash(country, state, county, category);
    }

    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    @Override
    public boolean equals(Object o) {
        return (this == o) || ((o instanceof LocateResponseBuilder r)
                && Objects.equals(country, r.country)
                && Objects.equals(state, r.state)
                && Objects.equals(county, r.county)
                && Objects.equals(category, r.category));
    }

    /**
     * Set a new value for the {@code country} record component in the builder
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public LocateResponseBuilder country(String country) {
        this.country = country;
        return this;
    }

    /**
     * Return the current value for the {@code country} record component in the builder
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public String country() {
        return country;
    }

    /**
     * Set a new value for the {@code state} record component in the builder
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public LocateResponseBuilder state(String state) {
        this.state = state;
        return this;
    }

    /**
     * Return the current value for the {@code state} record component in the builder
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public String state() {
        return state;
    }

    /**
     * Set a new value for the {@code county} record component in the builder
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public LocateResponseBuilder county(String county) {
        this.county = county;
        return this;
    }

    /**
     * Return the current value for the {@code county} record component in the builder
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public String county() {
        return county;
    }

    /**
     * Set a new value for the {@code category} record component in the builder
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public LocateResponseBuilder category(String category) {
        this.category = category;
        return this;
    }

    /**
     * Return the current value for the {@code category} record component in the builder
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public String category() {
        return category;
    }

    /**
     * Add withers to {@code LocateResponse}
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public interface With {
        /**
         * Return the current value for the {@code country} record component in the builder
         */
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        String country();

        /**
         * Return the current value for the {@code state} record component in the builder
         */
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        String state();

        /**
         * Return the current value for the {@code county} record component in the builder
         */
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        String county();

        /**
         * Return the current value for the {@code category} record component in the builder
         */
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        String category();

        /**
         * Return a new record builder using the current values
         */
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        default LocateResponseBuilder with() {
            return new LocateResponseBuilder(country(), state(), county(), category());
        }

        /**
         * Return a new record built from the builder passed to the given consumer
         */
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        default LocateResponse with(Consumer<LocateResponseBuilder> consumer) {
            LocateResponseBuilder builder = with();
            consumer.accept(builder);
            return builder.build();
        }

        /**
         * Return a new instance of {@code LocateResponse} with a new value for {@code country}
         */
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        default LocateResponse withCountry(String country) {
            return new LocateResponse(country, state(), county(), category());
        }

        /**
         * Return a new instance of {@code LocateResponse} with a new value for {@code state}
         */
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        default LocateResponse withState(String state) {
            return new LocateResponse(country(), state, county(), category());
        }

        /**
         * Return a new instance of {@code LocateResponse} with a new value for {@code county}
         */
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        default LocateResponse withCounty(String county) {
            return new LocateResponse(country(), state(), county, category());
        }

        /**
         * Return a new instance of {@code LocateResponse} with a new value for {@code category}
         */
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        default LocateResponse withCategory(String category) {
            return new LocateResponse(country(), state(), county(), category);
        }
    }

    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    private static final class _FromWith implements LocateResponseBuilder.With {
        private final LocateResponse from;

        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        private _FromWith(LocateResponse from) {
            this.from = from;
        }

        @Override
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        public String country() {
            return from.country();
        }

        @Override
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        public String state() {
            return from.state();
        }

        @Override
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        public String county() {
            return from.county();
        }

        @Override
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        public String category() {
            return from.category();
        }
    }
}
