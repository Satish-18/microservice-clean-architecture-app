// Auto generated by io.soabase.recordbuilder.core.RecordBuilder: https://github.com/Randgalt/record-builder
package citytech.global.sapatide.usecase.login;

import java.util.AbstractMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.Consumer;
import java.util.stream.Stream;
import javax.annotation.processing.Generated;

@Generated("io.soabase.recordbuilder.core.RecordBuilder")
public class LoginUserRequestBuilder {
    private String email;

    private String password;

    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    private LoginUserRequestBuilder() {
    }

    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    private LoginUserRequestBuilder(String email, String password) {
        this.email = email;
        this.password = password;
    }

    /**
     * Static constructor/builder. Can be used instead of new LoginUserRequest(...)
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public static LoginUserRequest LoginUserRequest(String email, String password) {
        return new LoginUserRequest(email, password);
    }

    /**
     * Return a new builder with all fields set to default Java values
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public static LoginUserRequestBuilder builder() {
        return new LoginUserRequestBuilder();
    }

    /**
     * Return a new builder with all fields set to the values taken from the given record instance
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public static LoginUserRequestBuilder builder(LoginUserRequest from) {
        return new LoginUserRequestBuilder(from.email(), from.password());
    }

    /**
     * Return a "with"er for an existing record instance
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public static LoginUserRequestBuilder.With from(LoginUserRequest from) {
        return new _FromWith(from);
    }

    /**
     * Return a stream of the record components as map entries keyed with the component name and the value as the component value
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public static Stream<Map.Entry<String, Object>> stream(LoginUserRequest record) {
        return Stream.of(new AbstractMap.SimpleImmutableEntry<>("email", record.email()),
                 new AbstractMap.SimpleImmutableEntry<>("password", record.password()));
    }

    /**
     * Return a new record instance with all fields set to the current values in this builder
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public LoginUserRequest build() {
        return new LoginUserRequest(email, password);
    }

    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    @Override
    public String toString() {
        return "LoginUserRequestBuilder[email=" + email + ", password=" + password + "]";
    }

    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    @Override
    public int hashCode() {
        return Objects.hash(email, password);
    }

    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    @Override
    public boolean equals(Object o) {
        return (this == o) || ((o instanceof LoginUserRequestBuilder r)
                && Objects.equals(email, r.email)
                && Objects.equals(password, r.password));
    }

    /**
     * Set a new value for the {@code email} record component in the builder
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public LoginUserRequestBuilder email(String email) {
        this.email = email;
        return this;
    }

    /**
     * Return the current value for the {@code email} record component in the builder
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public String email() {
        return email;
    }

    /**
     * Set a new value for the {@code password} record component in the builder
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public LoginUserRequestBuilder password(String password) {
        this.password = password;
        return this;
    }

    /**
     * Return the current value for the {@code password} record component in the builder
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public String password() {
        return password;
    }

    /**
     * Add withers to {@code LoginUserRequest}
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public interface With {
        /**
         * Return the current value for the {@code email} record component in the builder
         */
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        String email();

        /**
         * Return the current value for the {@code password} record component in the builder
         */
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        String password();

        /**
         * Return a new record builder using the current values
         */
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        default LoginUserRequestBuilder with() {
            return new LoginUserRequestBuilder(email(), password());
        }

        /**
         * Return a new record built from the builder passed to the given consumer
         */
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        default LoginUserRequest with(Consumer<LoginUserRequestBuilder> consumer) {
            LoginUserRequestBuilder builder = with();
            consumer.accept(builder);
            return builder.build();
        }

        /**
         * Return a new instance of {@code LoginUserRequest} with a new value for {@code email}
         */
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        default LoginUserRequest withEmail(String email) {
            return new LoginUserRequest(email, password());
        }

        /**
         * Return a new instance of {@code LoginUserRequest} with a new value for {@code password}
         */
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        default LoginUserRequest withPassword(String password) {
            return new LoginUserRequest(email(), password);
        }
    }

    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    private static final class _FromWith implements LoginUserRequestBuilder.With {
        private final LoginUserRequest from;

        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        private _FromWith(LoginUserRequest from) {
            this.from = from;
        }

        @Override
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        public String email() {
            return from.email();
        }

        @Override
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        public String password() {
            return from.password();
        }
    }
}
