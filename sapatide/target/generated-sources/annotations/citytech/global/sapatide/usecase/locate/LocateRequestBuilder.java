// Auto generated by io.soabase.recordbuilder.core.RecordBuilder: https://github.com/Randgalt/record-builder
package citytech.global.sapatide.usecase.locate;

import java.util.AbstractMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.Consumer;
import java.util.stream.Stream;
import javax.annotation.processing.Generated;

@Generated("io.soabase.recordbuilder.core.RecordBuilder")
public class LocateRequestBuilder {
    private String longitude;

    private String latitude;

    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    private LocateRequestBuilder() {
    }

    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    private LocateRequestBuilder(String longitude, String latitude) {
        this.longitude = longitude;
        this.latitude = latitude;
    }

    /**
     * Static constructor/builder. Can be used instead of new LocateRequest(...)
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public static LocateRequest LocateRequest(String longitude, String latitude) {
        return new LocateRequest(longitude, latitude);
    }

    /**
     * Return a new builder with all fields set to default Java values
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public static LocateRequestBuilder builder() {
        return new LocateRequestBuilder();
    }

    /**
     * Return a new builder with all fields set to the values taken from the given record instance
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public static LocateRequestBuilder builder(LocateRequest from) {
        return new LocateRequestBuilder(from.longitude(), from.latitude());
    }

    /**
     * Return a "with"er for an existing record instance
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public static LocateRequestBuilder.With from(LocateRequest from) {
        return new _FromWith(from);
    }

    /**
     * Return a stream of the record components as map entries keyed with the component name and the value as the component value
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public static Stream<Map.Entry<String, Object>> stream(LocateRequest record) {
        return Stream.of(new AbstractMap.SimpleImmutableEntry<>("longitude", record.longitude()),
                 new AbstractMap.SimpleImmutableEntry<>("latitude", record.latitude()));
    }

    /**
     * Return a new record instance with all fields set to the current values in this builder
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public LocateRequest build() {
        return new LocateRequest(longitude, latitude);
    }

    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    @Override
    public String toString() {
        return "LocateRequestBuilder[longitude=" + longitude + ", latitude=" + latitude + "]";
    }

    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    @Override
    public int hashCode() {
        return Objects.hash(longitude, latitude);
    }

    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    @Override
    public boolean equals(Object o) {
        return (this == o) || ((o instanceof LocateRequestBuilder r)
                && Objects.equals(longitude, r.longitude)
                && Objects.equals(latitude, r.latitude));
    }

    /**
     * Set a new value for the {@code longitude} record component in the builder
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public LocateRequestBuilder longitude(String longitude) {
        this.longitude = longitude;
        return this;
    }

    /**
     * Return the current value for the {@code longitude} record component in the builder
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public String longitude() {
        return longitude;
    }

    /**
     * Set a new value for the {@code latitude} record component in the builder
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public LocateRequestBuilder latitude(String latitude) {
        this.latitude = latitude;
        return this;
    }

    /**
     * Return the current value for the {@code latitude} record component in the builder
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public String latitude() {
        return latitude;
    }

    /**
     * Add withers to {@code LocateRequest}
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public interface With {
        /**
         * Return the current value for the {@code longitude} record component in the builder
         */
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        String longitude();

        /**
         * Return the current value for the {@code latitude} record component in the builder
         */
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        String latitude();

        /**
         * Return a new record builder using the current values
         */
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        default LocateRequestBuilder with() {
            return new LocateRequestBuilder(longitude(), latitude());
        }

        /**
         * Return a new record built from the builder passed to the given consumer
         */
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        default LocateRequest with(Consumer<LocateRequestBuilder> consumer) {
            LocateRequestBuilder builder = with();
            consumer.accept(builder);
            return builder.build();
        }

        /**
         * Return a new instance of {@code LocateRequest} with a new value for {@code longitude}
         */
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        default LocateRequest withLongitude(String longitude) {
            return new LocateRequest(longitude, latitude());
        }

        /**
         * Return a new instance of {@code LocateRequest} with a new value for {@code latitude}
         */
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        default LocateRequest withLatitude(String latitude) {
            return new LocateRequest(longitude(), latitude);
        }
    }

    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    private static final class _FromWith implements LocateRequestBuilder.With {
        private final LocateRequest from;

        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        private _FromWith(LocateRequest from) {
            this.from = from;
        }

        @Override
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        public String longitude() {
            return from.longitude();
        }

        @Override
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        public String latitude() {
            return from.latitude();
        }
    }
}
