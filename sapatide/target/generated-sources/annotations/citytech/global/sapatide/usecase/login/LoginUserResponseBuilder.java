// Auto generated by io.soabase.recordbuilder.core.RecordBuilder: https://github.com/Randgalt/record-builder
package citytech.global.sapatide.usecase.login;

import java.util.AbstractMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.Consumer;
import java.util.stream.Stream;
import javax.annotation.processing.Generated;

@Generated("io.soabase.recordbuilder.core.RecordBuilder")
public class LoginUserResponseBuilder {
    private String message;

    private String token;

    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    private LoginUserResponseBuilder() {
    }

    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    private LoginUserResponseBuilder(String message, String token) {
        this.message = message;
        this.token = token;
    }

    /**
     * Static constructor/builder. Can be used instead of new LoginUserResponse(...)
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public static LoginUserResponse LoginUserResponse(String message, String token) {
        return new LoginUserResponse(message, token);
    }

    /**
     * Return a new builder with all fields set to default Java values
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public static LoginUserResponseBuilder builder() {
        return new LoginUserResponseBuilder();
    }

    /**
     * Return a new builder with all fields set to the values taken from the given record instance
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public static LoginUserResponseBuilder builder(LoginUserResponse from) {
        return new LoginUserResponseBuilder(from.message(), from.token());
    }

    /**
     * Return a "with"er for an existing record instance
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public static LoginUserResponseBuilder.With from(LoginUserResponse from) {
        return new _FromWith(from);
    }

    /**
     * Return a stream of the record components as map entries keyed with the component name and the value as the component value
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public static Stream<Map.Entry<String, Object>> stream(LoginUserResponse record) {
        return Stream.of(new AbstractMap.SimpleImmutableEntry<>("message", record.message()),
                 new AbstractMap.SimpleImmutableEntry<>("token", record.token()));
    }

    /**
     * Return a new record instance with all fields set to the current values in this builder
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public LoginUserResponse build() {
        return new LoginUserResponse(message, token);
    }

    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    @Override
    public String toString() {
        return "LoginUserResponseBuilder[message=" + message + ", token=" + token + "]";
    }

    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    @Override
    public int hashCode() {
        return Objects.hash(message, token);
    }

    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    @Override
    public boolean equals(Object o) {
        return (this == o) || ((o instanceof LoginUserResponseBuilder r)
                && Objects.equals(message, r.message)
                && Objects.equals(token, r.token));
    }

    /**
     * Set a new value for the {@code message} record component in the builder
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public LoginUserResponseBuilder message(String message) {
        this.message = message;
        return this;
    }

    /**
     * Return the current value for the {@code message} record component in the builder
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public String message() {
        return message;
    }

    /**
     * Set a new value for the {@code token} record component in the builder
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public LoginUserResponseBuilder token(String token) {
        this.token = token;
        return this;
    }

    /**
     * Return the current value for the {@code token} record component in the builder
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public String token() {
        return token;
    }

    /**
     * Add withers to {@code LoginUserResponse}
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public interface With {
        /**
         * Return the current value for the {@code message} record component in the builder
         */
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        String message();

        /**
         * Return the current value for the {@code token} record component in the builder
         */
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        String token();

        /**
         * Return a new record builder using the current values
         */
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        default LoginUserResponseBuilder with() {
            return new LoginUserResponseBuilder(message(), token());
        }

        /**
         * Return a new record built from the builder passed to the given consumer
         */
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        default LoginUserResponse with(Consumer<LoginUserResponseBuilder> consumer) {
            LoginUserResponseBuilder builder = with();
            consumer.accept(builder);
            return builder.build();
        }

        /**
         * Return a new instance of {@code LoginUserResponse} with a new value for {@code message}
         */
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        default LoginUserResponse withMessage(String message) {
            return new LoginUserResponse(message, token());
        }

        /**
         * Return a new instance of {@code LoginUserResponse} with a new value for {@code token}
         */
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        default LoginUserResponse withToken(String token) {
            return new LoginUserResponse(message(), token);
        }
    }

    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    private static final class _FromWith implements LoginUserResponseBuilder.With {
        private final LoginUserResponse from;

        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        private _FromWith(LoginUserResponse from) {
            this.from = from;
        }

        @Override
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        public String message() {
            return from.message();
        }

        @Override
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        public String token() {
            return from.token();
        }
    }
}
