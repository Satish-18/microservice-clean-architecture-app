// Auto generated by io.soabase.recordbuilder.core.RecordBuilder: https://github.com/Randgalt/record-builder
package citytech.global.sapatide.resource.payload;

import java.util.AbstractMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.Consumer;
import java.util.stream.Stream;
import javax.annotation.processing.Generated;

@Generated("io.soabase.recordbuilder.core.RecordBuilder")
public class CreateUserRequestPayloadBuilder {
    private String firstName;

    private String lastName;

    private String email;

    private String userType;

    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    private CreateUserRequestPayloadBuilder() {
    }

    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    private CreateUserRequestPayloadBuilder(String firstName, String lastName, String email,
            String userType) {
        this.firstName = firstName;
        this.lastName = lastName;
        this.email = email;
        this.userType = userType;
    }

    /**
     * Static constructor/builder. Can be used instead of new CreateUserRequestPayload(...)
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public static CreateUserRequestPayload CreateUserRequestPayload(String firstName,
            String lastName, String email, String userType) {
        return new CreateUserRequestPayload(firstName, lastName, email, userType);
    }

    /**
     * Return a new builder with all fields set to default Java values
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public static CreateUserRequestPayloadBuilder builder() {
        return new CreateUserRequestPayloadBuilder();
    }

    /**
     * Return a new builder with all fields set to the values taken from the given record instance
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public static CreateUserRequestPayloadBuilder builder(CreateUserRequestPayload from) {
        return new CreateUserRequestPayloadBuilder(from.firstName(), from.lastName(), from.email(), from.userType());
    }

    /**
     * Return a "with"er for an existing record instance
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public static CreateUserRequestPayloadBuilder.With from(CreateUserRequestPayload from) {
        return new _FromWith(from);
    }

    /**
     * Return a stream of the record components as map entries keyed with the component name and the value as the component value
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public static Stream<Map.Entry<String, Object>> stream(CreateUserRequestPayload record) {
        return Stream.of(new AbstractMap.SimpleImmutableEntry<>("firstName", record.firstName()),
                 new AbstractMap.SimpleImmutableEntry<>("lastName", record.lastName()),
                 new AbstractMap.SimpleImmutableEntry<>("email", record.email()),
                 new AbstractMap.SimpleImmutableEntry<>("userType", record.userType()));
    }

    /**
     * Return a new record instance with all fields set to the current values in this builder
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public CreateUserRequestPayload build() {
        return new CreateUserRequestPayload(firstName, lastName, email, userType);
    }

    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    @Override
    public String toString() {
        return "CreateUserRequestPayloadBuilder[firstName=" + firstName + ", lastName=" + lastName + ", email=" + email + ", userType=" + userType + "]";
    }

    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    @Override
    public int hashCode() {
        return Objects.hash(firstName, lastName, email, userType);
    }

    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    @Override
    public boolean equals(Object o) {
        return (this == o) || ((o instanceof CreateUserRequestPayloadBuilder r)
                && Objects.equals(firstName, r.firstName)
                && Objects.equals(lastName, r.lastName)
                && Objects.equals(email, r.email)
                && Objects.equals(userType, r.userType));
    }

    /**
     * Set a new value for the {@code firstName} record component in the builder
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public CreateUserRequestPayloadBuilder firstName(String firstName) {
        this.firstName = firstName;
        return this;
    }

    /**
     * Return the current value for the {@code firstName} record component in the builder
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public String firstName() {
        return firstName;
    }

    /**
     * Set a new value for the {@code lastName} record component in the builder
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public CreateUserRequestPayloadBuilder lastName(String lastName) {
        this.lastName = lastName;
        return this;
    }

    /**
     * Return the current value for the {@code lastName} record component in the builder
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public String lastName() {
        return lastName;
    }

    /**
     * Set a new value for the {@code email} record component in the builder
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public CreateUserRequestPayloadBuilder email(String email) {
        this.email = email;
        return this;
    }

    /**
     * Return the current value for the {@code email} record component in the builder
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public String email() {
        return email;
    }

    /**
     * Set a new value for the {@code userType} record component in the builder
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public CreateUserRequestPayloadBuilder userType(String userType) {
        this.userType = userType;
        return this;
    }

    /**
     * Return the current value for the {@code userType} record component in the builder
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public String userType() {
        return userType;
    }

    /**
     * Add withers to {@code CreateUserRequestPayload}
     */
    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    public interface With {
        /**
         * Return the current value for the {@code firstName} record component in the builder
         */
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        String firstName();

        /**
         * Return the current value for the {@code lastName} record component in the builder
         */
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        String lastName();

        /**
         * Return the current value for the {@code email} record component in the builder
         */
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        String email();

        /**
         * Return the current value for the {@code userType} record component in the builder
         */
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        String userType();

        /**
         * Return a new record builder using the current values
         */
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        default CreateUserRequestPayloadBuilder with() {
            return new CreateUserRequestPayloadBuilder(firstName(), lastName(), email(), userType());
        }

        /**
         * Return a new record built from the builder passed to the given consumer
         */
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        default CreateUserRequestPayload with(Consumer<CreateUserRequestPayloadBuilder> consumer) {
            CreateUserRequestPayloadBuilder builder = with();
            consumer.accept(builder);
            return builder.build();
        }

        /**
         * Return a new instance of {@code CreateUserRequestPayload} with a new value for {@code firstName}
         */
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        default CreateUserRequestPayload withFirstName(String firstName) {
            return new CreateUserRequestPayload(firstName, lastName(), email(), userType());
        }

        /**
         * Return a new instance of {@code CreateUserRequestPayload} with a new value for {@code lastName}
         */
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        default CreateUserRequestPayload withLastName(String lastName) {
            return new CreateUserRequestPayload(firstName(), lastName, email(), userType());
        }

        /**
         * Return a new instance of {@code CreateUserRequestPayload} with a new value for {@code email}
         */
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        default CreateUserRequestPayload withEmail(String email) {
            return new CreateUserRequestPayload(firstName(), lastName(), email, userType());
        }

        /**
         * Return a new instance of {@code CreateUserRequestPayload} with a new value for {@code userType}
         */
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        default CreateUserRequestPayload withUserType(String userType) {
            return new CreateUserRequestPayload(firstName(), lastName(), email(), userType);
        }
    }

    @Generated("io.soabase.recordbuilder.core.RecordBuilder")
    private static final class _FromWith implements CreateUserRequestPayloadBuilder.With {
        private final CreateUserRequestPayload from;

        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        private _FromWith(CreateUserRequestPayload from) {
            this.from = from;
        }

        @Override
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        public String firstName() {
            return from.firstName();
        }

        @Override
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        public String lastName() {
            return from.lastName();
        }

        @Override
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        public String email() {
            return from.email();
        }

        @Override
        @Generated("io.soabase.recordbuilder.core.RecordBuilder")
        public String userType() {
            return from.userType();
        }
    }
}
